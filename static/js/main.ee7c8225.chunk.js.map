{"version":3,"sources":["YouTubePlaylist.js","CalendarGrid.js","App.js","reportWebVitals.js","index.js"],"names":["YouTubePlaylist","this","props","videoIds","className","playlistTitle","src","frameBorder","allowFullScreen","Component","CalendarGrid","state","width","height","monthDayKey","updateWindowDimensions","bind","data","monthDayIndex","Map","row","videoId","Video","When","split","month","day","key","has","set","get","push","months","videoCounts","dayArray","videoCount","length","console","log","today","Date","getMonth","date","getDate","squares","xLabels","yLabels","yLabelTextAlign","Math","round","min","max","cellStyle","background","value","x","y","styleObj","cursor","color","fontSize","outline","onClick","setState","cellRender","getDateStringFromKey","window","addEventListener","removeEventListener","innerWidth","innerHeight","toLocaleString","App","fetchData","tsv","then","map","reverse","join","getAllVideoIds","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAuCeA,G,mLAjCP,OAAIC,KAAKC,MAAMC,SAGP,sBAAKC,UAAU,kBAAf,UACI,6BACCH,KAAKC,MAAMG,gBAEZ,qBAAKD,UAAU,mBAAf,SACI,wBAAQA,UAAU,oBAAoBE,IAAK,mDAAqDL,KAAKC,MAAMC,SAAUI,YAAY,IAAIC,iBAAe,SAK3JP,KAAKC,MAAMG,cAGZ,sBAAKD,UAAU,kBAAf,UACI,6BACCH,KAAKC,MAAMG,gBAEZ,qBAAKD,UAAU,wBAQhB,4B,GA/BWK,c,+CCgKfC,E,kDA5JX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CAAEC,MAAO,EAAGC,OAAQ,EAAGC,YAAa,IACjD,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAHf,E,qDAOlB,IAAD,OACI,GAAIf,KAAKC,MAAMe,KACf,CAAC,IAAD,MACQC,EAAgB,IAAIC,IAD5B,cAEoBlB,KAAKC,MAAMe,MAF/B,IAEI,2BACA,CAAC,IADQG,EACT,QACQC,EAAUD,EAAIE,MADtB,EAEkCF,EAAIG,KAAKC,MAAM,KAFjD,mBAESC,EAFT,KAEgBC,EAFhB,KAGQC,GAHR,KAGcF,EAAQ,IAAMC,GACnBR,EAAcU,IAAID,IAEnBT,EAAcW,IAAIF,EAAK,IAE3BT,EAAcY,IAAIH,GAAKI,KAAKV,IAXpC,8BAaI,IAAIW,EAAS,CAAC,MAAM,MAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAGrFA,EAFA/B,KAAKU,MAAMC,MAAQ,IAEV,CAAC,KAAK,KAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIjE,CAAC,MAAM,MAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAIzF,IAFA,IACIqB,EAAc,GACTP,EAAM,EAAGA,GAAO,GAAIA,IAC7B,CAEI,IADA,IAAIQ,EAAW,GACNT,EAAM,EAAGA,GAAS,GAAIA,IAC/B,CACI,IAAIE,EAAMF,EAAQ,IAAMC,EACpBS,EAAa,EACbjB,EAAcU,IAAID,KAElBQ,EAAajB,EAAcY,IAAIH,GAAKS,QAExCF,EAASH,KAAKI,GAElBF,EAAYF,KAAKG,GAErBG,QAAQC,IAAIL,GAEZ,IAAMM,EAAQ,IAAIC,KACZf,EAAQc,EAAME,WACdC,EAAOH,EAAMI,UAAY,EAE/B,OACI,gCACI,qBAAKvC,UAAU,eAAf,SACA,cAAC,IAAD,CACIwC,SAAS,EACTC,QAASb,EACTc,QA7BC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MA8B7K7B,KAAMgB,EACNc,gBAAiB,SACjBlC,OAAQmC,KAAKC,MAAMD,KAAKE,IAAIF,KAAKG,IAAIlD,KAAKU,MAAMC,MAAQ,GAAI,IAAK,KACjEwC,UAAW,SAACC,EAAYC,EAAOJ,EAAKC,EAAKlC,EAAMsC,EAAGC,GAE9C,IAAIC,EAAW,CACXJ,WAAYC,EAAQ,EAAR,UAAwB,iBAGpCI,OAAQJ,EAAQ,EAAI,UAAY,UAChCK,MAAO,QAgCX,OA9BI,EAAKhD,MAAMC,MAAQ,IAEnB6C,EAASG,SAAW,MAEf,EAAKjD,MAAMC,MAAQ,IAExB6C,EAASG,SAAW,OAEf,EAAKjD,MAAMC,MAAQ,IAExB6C,EAASG,SAAW,OAEf,EAAKjD,MAAMC,MAAQ,IAExB6C,EAASG,SAAW,OAEf,EAAKjD,MAAMC,MAAQ,OAExB6C,EAASG,SAAW,QAGpBL,IAAM9B,GAAS+B,IAAMd,IAErBe,EAASI,QAAU,qBAER,IAAIrB,KAAK,KAAMe,EAAGC,EAAE,GACtBf,aAAec,IAExBE,EAASJ,WAAa,gBAEnBI,GAEXK,QAAS,SAACP,EAAGC,GAET,IAAI7B,EAAO4B,EAAI,EAAK,KAAOC,EAAI,GAC1BtC,EAAcU,IAAID,IAIvB,EAAKoC,SAAS,CAACjD,YAAaa,KAEhCqC,WAAY,SAAAV,GAAK,OAAIA,EAAQ,EAAI,qBAAKlD,UAAU,eAAf,SAA+BkD,IAAe,6BAGnF,cAAC,EAAD,CAAiBjD,eAAe,UAAAJ,KAAKU,aAAL,eAAYG,aAAcb,KAAKgE,qBAAqBhE,KAAKU,MAAMG,aAAe,GAAIX,UAAU,UAAAF,KAAKU,aAAL,eAAYG,aAAcI,EAAcY,IAAI7B,KAAKU,MAAMG,aAAe,QAM1M,OACI,qBAAKV,UAAU,eAAf,0B,0CAQRH,KAAKc,yBACLmD,OAAOC,iBAAiB,SAAUlE,KAAKc,0B,6CAIvCmD,OAAOE,oBAAoB,SAAUnE,KAAKc,0B,+CAI1Cd,KAAK8D,UAAS,SAASpD,EAAOT,GAC1B,MAAO,CAAEY,YAAaH,EAAMG,YAAaF,MAAOsD,OAAOG,WAAYxD,OAAQqD,OAAOI,kB,2CAIrExD,GACpB,IAAD,EACuBA,EAAYU,MAAM,KADzC,mBACSC,EADT,KACgBC,EADhB,KAII,OADW,IAAIc,KAAK,KADpBf,GAAS,EACwBC,GACrB6C,eAAe,UAAW,CAAC9C,MAAO,OAAQC,IAAK,gB,GAzJxCjB,a,QC0CZ+D,E,kLArCXvE,KAAKwE,c,kCAIN,IAAD,OACEC,YAAI,kJACDC,MAAK,SAAA1D,GAEFoB,QAAQC,IAAIrB,GACZ,EAAK8C,SAAS,CAAC9C,KAAMA,S,qCAIdA,GAEb,IAAId,EAAWc,EAAK2D,KAAI,SAAArB,GAAC,OAAIA,EAAEjC,SAE/B,OADAnB,EAAS0E,UACF1E,EAAS2E,KAAK,O,+BAItB,IAAD,IACM3E,EAAW,GAKf,OAJA,UAAIF,KAAKU,aAAT,aAAI,EAAYM,QAEdd,EAAWF,KAAK8E,eAAe9E,KAAKU,MAAMM,OAG1C,sBAAKb,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CAAiBC,cAAe,aAAcF,SAAUA,IACxD,cAAC,EAAD,CAAcc,KAAI,UAAEhB,KAAKU,aAAP,aAAE,EAAYM,c,GAnCtBR,aCMHuE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee7c8225.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './YouTubePlaylist.css';\n\nclass YouTubePlaylist extends Component {\n    render()\n    {\n        if (this.props.videoIds)\n        {\n            return (\n                <div className=\"YouTubePlaylist\">\n                    <h2>\n                    {this.props.playlistTitle}\n                    </h2>\n                    <div className='iframe-container'>\n                        <iframe className='responsive-iframe' src={\"https://www.youtube.com/embed/VIDEO_ID?playlist=\" + this.props.videoIds} frameBorder=\"0\" allowFullScreen></iframe>\n                    </div>\n                </div>\n            );\n        }\n        else if (this.props.playlistTitle)\n        {\n            return (\n                <div className=\"YouTubePlaylist\">\n                    <h2>\n                    {this.props.playlistTitle}\n                    </h2>\n                    <div className='iframe-container'>\n                    </div>\n\n                </div>\n            );\n        }\n        else\n        {\n            return <div></div>\n        }\n    }\n}\n\nexport default YouTubePlaylist;\n","import React, { Component } from 'react';\nimport './CalendarGrid.css';\nimport HeatMap from 'react-heatmap-grid';\nimport YouTubePlaylist from './YouTubePlaylist';\n\nclass CalendarGrid extends Component\n{\n    constructor(props) {\n        super(props);\n        this.state = { width: 0, height: 0, monthDayKey: '' };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n      }\n\n    render()\n    {\n        if (this.props.data)\n        {\n            let monthDayIndex = new Map();\n            for (let row of this.props.data)\n            {\n                let videoId = row.Video;\n                let [month, day, _yeartime] = row.When.split('/');\n                let key = month + '-' + day;\n                if (!monthDayIndex.has(key))\n                {\n                    monthDayIndex.set(key, []);\n                }\n                monthDayIndex.get(key).push(videoId);\n            }\n            let months = ['Jan','Feb','Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n            if (this.state.width < 480)\n            {\n                months = ['J.','F.','M.', 'A.', 'M.', 'J.', 'J.', 'A.', 'S.', 'O.', 'N.', 'D.'];\n            }\n            else\n            {\n                months = ['Jan','Feb','Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n            }\n            const days = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"];\n            let videoCounts = [];\n            for (let day = 1; day <= 31; day++)\n            {\n                let dayArray = [];\n                for (let month=1; month <= 12; month++)\n                {\n                    let key = month + '-' + day;\n                    let videoCount = 0;\n                    if (monthDayIndex.has(key))\n                    {\n                        videoCount = monthDayIndex.get(key).length;\n                    }\n                    dayArray.push(videoCount);\n                }\n                videoCounts.push(dayArray);\n            }\n            console.log(videoCounts);\n\n            const today = new Date();\n            const month = today.getMonth();\n            const date = today.getDate() - 1; // zero index for consistency later\n\n            return (\n                <div>\n                    <div className=\"CalendarGrid\">\n                    <HeatMap\n                        squares={true}\n                        xLabels={months}\n                        yLabels={days}\n                        data={videoCounts} \n                        yLabelTextAlign={'center'}\n                        height={Math.round(Math.min(Math.max(this.state.width / 16, 10), 60))}\n                        cellStyle={(background, value, min, max, data, x, y) =>\n                        {\n                            let styleObj = {\n                                background: value > 0 ? `#D9D569` : 'rgb(0,0,0,0.1)',\n                                // background: value > 0 ? `#CE9F73` : 'rgb(0,0,0,0.1)',\n                                // fontSize: \"10pt\",\n                                cursor: value > 0 ? \"pointer\" : \"default\",\n                                color: \"#333\"\n                            }\n                            if (this.state.width < 400)\n                            {\n                                styleObj.fontSize = '9pt';\n                            }\n                            else if (this.state.width < 600)\n                            {\n                                styleObj.fontSize = '10pt';\n                            }\n                            else if (this.state.width < 800)\n                            {\n                                styleObj.fontSize = '11pt';\n                            }\n                            else if (this.state.width < 1000)\n                            {\n                                styleObj.fontSize = '12pt';\n                            }\n                            else if (this.state.width < 1200)\n                            {\n                                styleObj.fontSize = '13pt';\n                            }\n\n                            if (x === month && y === date)\n                            {\n                                styleObj.outline = 'solid #964B91 2px';\n                            }\n                            let thisDate = new Date(2020, x, y+1);\n                            if (thisDate.getMonth() !== x)\n                            {\n                                styleObj.background = 'rgb(0,0,0,0)';\n                            }\n                            return styleObj;\n                        }}\n                        onClick={(x, y) => \n                        {\n                            let key = (x + 1) + '-' + (y + 1);\n                            if (!monthDayIndex.has(key))\n                            {\n                                return;\n                            }\n                            this.setState({monthDayKey: key});\n                        }}\n                        cellRender={value => value > 0 ? <div className='calendarCell'>{value}</div> : <div></div>} \n                    />\n                    </div>\n                    <YouTubePlaylist playlistTitle={this.state?.monthDayKey ? this.getDateStringFromKey(this.state.monthDayKey) : ''} videoIds={this.state?.monthDayKey ? monthDayIndex.get(this.state.monthDayKey) : ''} />\n                </div>\n            );\n        }\n        else \n        {\n            return (\n                <div className=\"CalendarGrid\">\n                    Loading...\n                </div>\n            );\n        }\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n      \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n    \n    updateWindowDimensions() {\n        this.setState(function(state, props)  { \n            return { monthDayKey: state.monthDayKey, width: window.innerWidth, height: window.innerHeight }\n        });\n    }\n    \n    getDateStringFromKey(monthDayKey)\n    {\n        let [month, day] = monthDayKey.split('-');\n        month -= 1;\n        let date = new Date(2020, month, day)\n        return date.toLocaleString('default', {month: 'long', day: 'numeric'})\n\n    }\n}\n\nexport default CalendarGrid;\n","import './App.css';\nimport React, { Component } from 'react';\nimport YouTubePlaylist from './YouTubePlaylist';\nimport CalendarGrid from './CalendarGrid';\nimport {tsv} from 'd3-fetch';\n\nclass App extends Component {\n\n  componentDidMount()\n  {\n    this.fetchData();\n  }\n\n  fetchData()\n  {\n    tsv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRbuRgkPKcZuCdROW4HPx1gXwHIu_Z9gYmj5mlRwSzYjd2KAU9G4oaP9xffOV9bf6WUNADtyrCU2Yot/pub?output=tsv')\n      .then(data =>\n        {\n          console.log(data);\n          this.setState({data: data});\n        })\n  }\n\n  getAllVideoIds(data)\n  {\n    let videoIds = data.map(x => x.Video);\n    videoIds.reverse(); // reverse chron\n    return videoIds.join(',');\n  }\n\n  render()\n  {\n    let videoIds = '';\n    if (this.state?.data)\n    {\n      videoIds = this.getAllVideoIds(this.state.data);\n    }\n    return (\n      <div className=\"App\">\n        <h1>Hike History</h1>\n        <YouTubePlaylist playlistTitle={'All Videos'} videoIds={videoIds} />\n        <CalendarGrid data={this.state?.data}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}